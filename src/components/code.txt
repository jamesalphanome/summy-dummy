const TicTacToe = () => {
  const [board, setBoard] = useState(Array(9).fill(null)); // 3x3 board
  const [isXNext, setIsXNext] = useState(true); // Tracks the current player
  const winner = calculateWinner(board); // Checks for a winner

  // Handle square click
  const handleClick = (index) => {
    if (board[index] || winner) return; // Ignore if square is already filled or there's a winner

    const newBoard = board.slice();
    newBoard[index] = isXNext ? "X" : "O";
    setBoard(newBoard);
    setIsXNext(!isXNext);
  };

  // Reset the game
  const resetGame = () => {
    setBoard(Array(9).fill(null));
    setIsXNext(true);
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
      <h1 className="text-4xl font-bold mb-6">Tic Tac Toe</h1>

      <div className="grid grid-cols-3 gap-2">
        {board.map((value, index) => (
          <button
            key={index}
            onClick={() => handleClick(index)}
            className="w-20 h-20 text-2xl font-bold text-center bg-white border border-gray-300 shadow-md hover:bg-gray-100 focus:outline-none"
          >
            {value}
          </button>
        ))}
      </div>

      {winner || board.every((square) => square) ? (
        <div className="mt-6">
          <p className="text-2xl font-semibold">
            {winner ? `Winner: ${winner}` : "It's a draw!"}
          </p>
          <button
            onClick={resetGame}
            className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            Restart Game
          </button>
        </div>
      ) : (
        <p className="mt-6 text-xl font-medium">
          Next Player: {isXNext ? "X" : "O"}
        </p>
      )}
    </div>
  );
};

// Function to check for a winner
const calculateWinner = (squares) => {
  const lines = [
    [0, 1, 2], // Top row
    [3, 4, 5], // Middle row
    [6, 7, 8], // Bottom row
    [0, 3, 6], // Left column
    [1, 4, 7], // Middle column
    [2, 5, 8], // Right column
    [0, 4, 8], // Diagonal from top-left to bottom-right
    [2, 4, 6], // Diagonal from top-right to bottom-left
  ];

  for (let [a, b, c] of lines) {
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }

  return null; // No winner yet
};

export default TicTacToe;